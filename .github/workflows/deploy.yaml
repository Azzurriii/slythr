name: Deploy API to VPS via SSH

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Copy files to VPS via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./"
          target: "/home/deploy/apps/slythr"
          strip_components: 1
          overwrite: true
          rm: true

      - name: Execute deployment commands on VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: GEMINI_API_KEY,POSTGRES_PASSWORD,REDIS_PASSWORD,ETHERSCAN_API_KEY
          script: |
            cd /home/deploy/apps/slythr
            echo "Creating .env file with secrets"
            touch .env
            chmod 600 .env
            cat > .env << EOF
            SERVER_PORT=8080
            SERVER_ENV=production
            DB_HOST=postgres
            DB_PORT=5432
            DB_USER=postgres
            DB_PASSWORD=${POSTGRES_PASSWORD}
            DB_NAME=slythr
            DB_SSL_MODE=disable
            REDIS_ADDR=redis:6379
            REDIS_PASSWORD=${REDIS_PASSWORD}
            REDIS_DB=0
            GEMINI_API_KEY=${GEMINI_API_KEY}
            ETHERSCAN_API_KEY=${ETHERSCAN_API_KEY}
            SLITHER_CONTAINER_NAME=slither
            WORKSPACE_PATH=/workspace
            EOF
            echo "Stopping existing containers"
            docker-compose down || true
            echo "Pulling latest images"
            docker-compose pull
            echo "Building and starting new containers"
            docker-compose up -d --build --remove-orphans
            echo "Cleaning up .env file"
            rm -f .env
